<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Just do it!</title><link>https://aiwangfeng.github.io</link><description>The two most important days in your life are the day you are born and the day you find out why.</description><copyright>Just do it!</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://raw.githubusercontent.com/aiwangfeng/aiwangfeng.github.io/main/zhuque.svg</url><title>avatar</title><link>https://aiwangfeng.github.io</link></image><lastBuildDate>Wed, 11 Jun 2025 07:39:04 +0000</lastBuildDate><managingEditor>Just do it!</managingEditor><ttl>60</ttl><webMaster>Just do it!</webMaster><item><title>Density Models (by ChatGPT)</title><link>https://aiwangfeng.github.io/post/Density%20Models%20%28by%20ChatGPT%29.html</link><description>A **density model** in deep learning refers to a class of models that aim to **estimate the probability distribution** of a dataset, such that they can model how likely any given data point is, based on its underlying distribution.

In other words, density models learn the **likelihood** of the data, and the goal is to learn a function $p(x)$, where $x$ represents the data, such that the model assigns higher probabilities to **more likely data points** and lower probabilities to **less likely data points**.

### üéØ **Key Characteristics of Density Models:**

* **Learning the Distribution**: Density models aim to learn the distribution from which the data is sampled. They capture the **underlying structure** and dependencies of the data.
* **Probability Density**: Given some input $x$, a density model outputs $p(x)$, the probability of observing $x$ under the model's learned distribution.
* **Generative**: These models are **generative** in nature, meaning they can generate new samples from the learned distribution.

---

### üî• **Types of Density Models in Deep Learning**

1. **Variational Autoencoders (VAE)**:

   * A VAE is a **probabilistic model** that learns a **latent variable model** for the data. It assumes that the observed data is generated by a random process, and the VAE approximates the true posterior distribution of the latent variables.
   * **Generative**: VAEs can generate new data points from the learned distribution of the data.
   * **Latent Space**: VAEs learn a **latent space** where similar data points are close together in terms of probability.

   **Example**: A VAE learns the distribution of images, and from this learned distribution, it can generate new images that resemble the original dataset.

2. **Generative Adversarial Networks (GANs)**:

   * GANs are another type of **generative model** that tries to approximate the data distribution. GANs consist of two networks:

     * A **generator** that generates fake data.
     * A **discriminator** that tries to distinguish real data from fake data.
   * Through this adversarial process, the generator learns to generate data that closely mimics the true data distribution.

   **Example**: GANs are often used for **image generation**. The generator learns the distribution of real images and generates new images that look similar to real ones.

3. **Normalizing Flows**:

   * Normalizing flows are a family of models used to model complex distributions by transforming a simple distribution (e.g., Gaussian) into a more complex one using **invertible transformations**.
   * The key idea is to apply a sequence of **invertible transformations** to a simple distribution, such that you can compute the exact likelihood of the data.

   **Example**: Normalizing flows are used in density estimation tasks where you want to model very complex data distributions, such as in **image generation** or **speech synthesis**.

4. **Autoregressive Models (e.g., PixelCNN, WaveNet)**:

   * Autoregressive models estimate the conditional probability of a data point given the previous points in the sequence (or the previously generated pixels).
   * These models model the joint probability distribution by breaking it down into a product of conditional probabilities.

   **Example**: In **PixelCNN**, the network models the distribution of an image by modeling the conditional probability of each pixel given the previous pixels in the image, effectively learning the joint distribution of all pixels.

5. **Restricted Boltzmann Machines (RBM)**:

   * An RBM is a **probabilistic generative model** that learns to capture the distribution of the data. It can be seen as a type of **Markov Random Field** where hidden units are used to model the probability distribution of the visible (input) units.

   **Example**: RBMs are used in **collaborative filtering** (e.g., recommendation systems) or **feature learning** for unsupervised learning.

---

### üõ†Ô∏è **How Density Models are Used:**

* **Data Generation**: You can use density models to generate new data that is **similar to** or **resembles** your original dataset (e.g., generating new images from a model trained on images of cats).
* **Anomaly Detection**: In density estimation, if the model assigns a **low probability** to a data point, it can be considered an **anomaly** or outlier. This is useful for fraud detection, network intrusion detection, etc.
* **Semi-Supervised Learning**: Density models can also be used for **semi-supervised learning** tasks where the model is trained with a small amount of labeled data and a large amount of unlabeled data.

---

### üß† **Example Use Cases for Density Models:**

1. **Image Generation**: Using VAEs or GANs to create realistic images (e.g., face generation, art generation).
2. **Text Generation**: Using models like GPT (which is based on transformers) for generating text with a similar style to a training corpus.
3. **Anomaly Detection**: Using density models to detect outliers in data, such as unusual network traffic in cybersecurity.
4. **Data Augmentation**: Generating new samples in datasets to improve training performance when limited data is available.
5. **Reconstructing Data**: In the case of VAEs, for reconstructing missing or corrupted data (such as denoising).

---

### **Summary**

* **Density models** estimate the probability distribution of data and can generate new samples from that distribution.
* **Examples**: Variational Autoencoders (VAE), GANs, Normalizing Flows, PixelCNN, Restricted Boltzmann Machines (RBM).
* **Applications**: Image generation, anomaly detection, semi-supervised learning, and data augmentation.

Let me know if you'd like an example of any of these models!
„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Density%20Models%20%28by%20ChatGPT%29.html</guid><pubDate>Tue, 03 Jun 2025 08:37:46 +0000</pubDate></item><item><title>Common AI Terms</title><link>https://aiwangfeng.github.io/post/Common%20AI%20Terms.html</link><description>[From LLMs to hallucinations, here‚Äôs a simple guide to common AI terms](https://techcrunch.com/2025/05/25/from-llms-to-hallucinations-heres-a-simple-guide-to-common-ai-terms/)„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Common%20AI%20Terms.html</guid><pubDate>Mon, 26 May 2025 04:56:43 +0000</pubDate></item><item><title>Trading with Claude (and writing your own MCP server)</title><link>https://aiwangfeng.github.io/post/Trading%20with%20Claude%20%28and%20writing%20your%20own%20MCP%20server%29.html</link><description>[Trading with Claude (and writing your own MCP server)](Trading with Claude (and writing your own MCP server))„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Trading%20with%20Claude%20%28and%20writing%20your%20own%20MCP%20server%29.html</guid><pubDate>Mon, 26 May 2025 03:08:40 +0000</pubDate></item><item><title>In the Beginning was the Command Line - Neal Stephenson</title><link>https://aiwangfeng.github.io/post/In%20the%20Beginning%20was%20the%20Command%20Line%20-%20Neal%20Stephenson.html</link><description>[In the Beginning was the Command Line - Neal Stephenson](https://web.stanford.edu/class/cs81n/command.txt)„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/In%20the%20Beginning%20was%20the%20Command%20Line%20-%20Neal%20Stephenson.html</guid><pubDate>Mon, 26 May 2025 02:44:49 +0000</pubDate></item><item><title>Tailscale TLS Certificates Auto Renew</title><link>https://aiwangfeng.github.io/post/Tailscale%20TLS%20Certificates%20Auto%20Renew.html</link><description># /etc/systemd/system/tailscale-cert.service

```conf
[Unit]
Description=Tailscale SSL Service Renewal
After=network.target
After=syslog.target

[Service]
Type=oneshot
User=root
Group=root
WorkingDirectory=/etc/ssl/private/
Environment='HOSTNAME=[your device's hostname]'
Environment='DOMAIN=[your tailnet].ts.net'
ExecStart=tailscale cert ${HOSTNAME}.${DOMAIN}

[Install]
WantedBy=multi-user.target
```

# /etc/systemd/system/tailscale-cert.timer

```conf
[Unit]
Description=Renew Tailscale cert

[Timer]
OnCalendar=weekly
Unit=%i.service
Persistent=true

[Install]
WantedBy=timers.target
```
„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Tailscale%20TLS%20Certificates%20Auto%20Renew.html</guid><pubDate>Tue, 13 May 2025 09:09:25 +0000</pubDate></item><item><title>Self-signed Certificate</title><link>https://aiwangfeng.github.io/post/Self-signed%20Certificate.html</link><description># Create CA key

```
openssl genrsa -aes256 -out ca.key 4096
```

# Generate a CA certificate

```
openssl req -new -x509 -sha256 -days 3650 -key ca.key -out ca.crt
```

# Create a private key for a certificate

```
openssl genrsa -out siteprivate.key 4096
```

# Create a CSR

```
openssl req -new -sha256 -subj '/CN=www.example.com' -key siteprivate.key -out site.csr
```

# Create a EXT config

```
echo 'subjectAltName=DNS:*.example.com,IP:192.168.1.100' &gt; ext.cnf
```

# Generate a site certificate

```
openssl x509 -req -sha256 -days 3650 -CA ca.crt -CAkey ca.key -in site.csr -out site.crt -extfile ext.cnf -CAcreateserial
```
„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Self-signed%20Certificate.html</guid><pubDate>Sat, 10 May 2025 04:55:09 +0000</pubDate></item><item><title>Create Native Conda Environment for Apple Silicon</title><link>https://aiwangfeng.github.io/post/Create%20Native%20Conda%20Environment%20for%20Apple%20Silicon.html</link><description>### Command

```
CONDA_SUBDIR=osx-arm64 conda create -n native -c conda-forge python=3.11
```

### Make it permanent

```
conda activate native
conda config --env --set subdir osx-arm64
```

### Install some packeges

```
conda install -c apple tensorflow-deps
pip install tensorflow-macos tensorflow-metal
```„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Create%20Native%20Conda%20Environment%20for%20Apple%20Silicon.html</guid><pubDate>Tue, 25 Feb 2025 08:30:14 +0000</pubDate></item><item><title>Bookmarks</title><link>https://aiwangfeng.github.io/post/Bookmarks.html</link><description>[c82](https://www.c82.net/)
[Understanding Reasoning LLMs](https://magazine.sebastianraschka.com/p/understanding-reasoning-llms)„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Bookmarks.html</guid><pubDate>Sat, 08 Feb 2025 02:20:54 +0000</pubDate></item><item><title>Pandas DataFrame and Numpy</title><link>https://aiwangfeng.github.io/post/Pandas%20DataFrame%20and%20Numpy.html</link><description># [numpy.ndarray.flatten](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.flatten.html)

## ndarray.flatten(order='C')
     Return a copy of the array collapsed into one dimension.

```
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1,2], [3,4]])
&gt;&gt;&gt; a.flatten()
array([1, 2, 3, 4])
&gt;&gt;&gt; a.flatten('F')
array([1, 3, 2, 4])
```
# [numpy.ravel](https://numpy.org/doc/stable/reference/generated/numpy.ravel.html)

## numpy.ravel(a, order='C')
     Return a contiguous flattened array.

```
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([[1, 2, 3], [4, 5, 6]])
&gt;&gt;&gt; np.ravel(x)
array([1, 2, 3, 4, 5, 6])

&gt;&gt;&gt; x.reshape(-1)
array([1, 2, 3, 4, 5, 6])

&gt;&gt;&gt; np.ravel(x, order='F')
array([1, 4, 2, 5, 3, 6])
```

# [numpy.stack](https://numpy.org/doc/stable/reference/generated/numpy.stack.html)

## numpy.stack(arrays, axis=0, out=None, *, dtype=None, casting='same_kind')
    Join a sequence of arrays along a new axis.

```
&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; b = np.array([4, 5, 6])
&gt;&gt;&gt; np.stack((a, b))
array([[1, 2, 3],
       [4, 5, 6]])
```

# [numpy.split](https://numpy.org/doc/stable/reference/generated/numpy.split.html)

## numpy.split(ary, indices_or_sections, axis=0)
     Split an array into multiple sub-arrays as views into ary.

```
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.arange(9.0)
&gt;&gt;&gt; np.split(x, 3)
[array([0.,  1.,  2.]), array([3.,  4.,  5.]), array([6.,  7.,  8.])]
```

```
&gt;&gt;&gt; x = np.arange(8.0)
&gt;&gt;&gt; np.split(x, [3, 5, 6, 10])
[array([0.,  1.,  2.]),
 array([3.,  4.]),
 array([5.]),
 array([6.,  7.]),
 array([], dtype=float64)]
```„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Pandas%20DataFrame%20and%20Numpy.html</guid><pubDate>Wed, 22 Jan 2025 06:36:10 +0000</pubDate></item><item><title>Why Europeans don't get Elon?</title><link>https://aiwangfeng.github.io/post/Why%20Europeans%20don%27t%20get%20Elon-.html</link><description>[Why Europeans don't get Elon?](https://media.play.ht/full_-O4Bss4q19NbV2JzVzlp.mp3)„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Why%20Europeans%20don%27t%20get%20Elon-.html</guid><pubDate>Thu, 15 Aug 2024 02:50:17 +0000</pubDate></item><item><title>Interesting Youtube Videos</title><link>https://aiwangfeng.github.io/post/Interesting%20Youtube%20Videos.html</link><description>- https://www.youtube.com/watch?v=MO-AExWdl4Q„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Interesting%20Youtube%20Videos.html</guid><pubDate>Sat, 03 Aug 2024 14:54:54 +0000</pubDate></item><item><title>automount NFS shares in macOS</title><link>https://aiwangfeng.github.io/post/automount%20NFS%20shares%20in%20macOS.html</link><description># The Read-only Root Filesystem&#13;
&#13;
```&#13;
synthetic.conf ‚Äì synthetic symbolic link and directory manifest&#13;
```&#13;
This file allows creating symbol links/empty directoreis under / which is mounted as read-only.&#13;
&#13;
# /etc/auto_master&#13;
&#13;
```&#13;
#&#13;
# Automounter master map&#13;
#&#13;
+auto_master  # Use directory service&#13;
#/net   -hosts  -nobrowse,hidefromfinder,nosuid&#13;
/home   auto_home -nobrowse,hidefromfinder&#13;
/Network/Servers -fstab&#13;
/-   -static&#13;
/-   auto_nfs -soft,nobrowse,nosuid&#13;
```&#13;
&#13;
# /etc/auto_nfs&#13;
&#13;
```&#13;
/System/Volumes/Data/DVD -fstype=nfs,soft,resvport,rw,noowners 192.168.1.10:/DVD&#13;
/System/Volumes/Data/Bluray -fstype=nfs,soft,resvport,rw,noowners 192.168.1.10:/Bluray&#13;
```&#13;
&#13;
# /etc/synthetic.conf&#13;
&#13;
```&#13;
DVD^ISystem/Volumes/Data/DVD&#13;
Bluray^ISystem/Volumes/Data/Bluray&#13;
```&#13;
&#13;
# /etc/nfs.conf for the NFS server&#13;
&#13;
```&#13;
nfs.client.mount.options = vers=4&#13;
```„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/automount%20NFS%20shares%20in%20macOS.html</guid><pubDate>Mon, 01 Apr 2024 03:30:56 +0000</pubDate></item><item><title>They'll fake it till they break it.</title><link>https://aiwangfeng.github.io/post/They%27ll%20fake%20it%20till%20they%20break%20it..html</link><description>![image](https://github.com/aiwangfeng/aiwangfeng.github.io/assets/4962499/807afa1c-b9b5-4b6a-b121-00dee8362556)„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/They%27ll%20fake%20it%20till%20they%20break%20it..html</guid><pubDate>Sat, 30 Mar 2024 07:50:38 +0000</pubDate></item><item><title>Wikipedia Pages</title><link>https://aiwangfeng.github.io/post/Wikipedia%20Pages.html</link><description>- [Scoring Rule](https://en.wikipedia.org/wiki/Scoring_rule)„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Wikipedia%20Pages.html</guid><pubDate>Mon, 25 Mar 2024 08:35:21 +0000</pubDate></item><item><title>Are we living in a toilet world?</title><link>https://aiwangfeng.github.io/post/Are%20we%20living%20in%20a%20toilet%20world-.html</link><description>![image](https://github.com/aiwangfeng/aiwangfeng.github.io/assets/4962499/850e1ecf-bbf9-4c22-a772-6180daae629a)&#13;
„ÄÇ</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Are%20we%20living%20in%20a%20toilet%20world-.html</guid><pubDate>Sun, 24 Mar 2024 14:30:57 +0000</pubDate></item></channel></rss>
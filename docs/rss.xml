<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>BlackSheepWall</title><link>https://aiwangfeng.github.io</link><description>The two most important days in your life are the day you are born and the day you find out why.</description><copyright>BlackSheepWall</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://raw.githubusercontent.com/aiwangfeng/aiwangfeng.github.io/main/zhuque.svg</url><title>avatar</title><link>https://aiwangfeng.github.io</link></image><lastBuildDate>Tue, 13 May 2025 09:09:50 +0000</lastBuildDate><managingEditor>BlackSheepWall</managingEditor><ttl>60</ttl><webMaster>BlackSheepWall</webMaster><item><title>Tailscale TLS Certificates Auto Renew</title><link>https://aiwangfeng.github.io/post/Tailscale%20TLS%20Certificates%20Auto%20Renew.html</link><description># /etc/systemd/system/tailscale-cert.service

```conf
[Unit]
Description=Tailscale SSL Service Renewal
After=network.target
After=syslog.target

[Service]
Type=oneshot
User=root
Group=root
WorkingDirectory=/etc/ssl/private/
Environment='HOSTNAME=[your device's hostname]'
Environment='DOMAIN=[your tailnet].ts.net'
ExecStart=tailscale cert ${HOSTNAME}.${DOMAIN}

[Install]
WantedBy=multi-user.target
```

# /etc/systemd/system/tailscale-cert.timer

```conf
[Unit]
Description=Renew Tailscale cert

[Timer]
OnCalendar=weekly
Unit=%i.service
Persistent=true

[Install]
WantedBy=timers.target
```
。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Tailscale%20TLS%20Certificates%20Auto%20Renew.html</guid><pubDate>Tue, 13 May 2025 09:09:25 +0000</pubDate></item><item><title>Self-signed Certificate</title><link>https://aiwangfeng.github.io/post/Self-signed%20Certificate.html</link><description># Create CA key

```
openssl genrsa -aes256 -out ca.key 4096
```

# Generate a CA certificate

```
openssl req -new -x509 -sha256 -days 3650 -key ca.key -out ca.crt
```

# Create a private key for a certificate

```
openssl genrsa -out siteprivate.key 4096
```

# Create a CSR

```
openssl req -new -sha256 -subj '/CN=www.example.com' -key siteprivate.key -out site.csr
```

# Create a EXT config

```
echo 'subjectAltName=DNS:*.example.com,IP:192.168.1.100' &gt; ext.cnf
```

# Generate a site certificate

```
openssl x509 -req -sha256 -days 3650 -CA ca.crt -CAkey ca.key -in site.csr -out site.crt -extfile ext.cnf -CAcreateserial
```
。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Self-signed%20Certificate.html</guid><pubDate>Sat, 10 May 2025 04:55:09 +0000</pubDate></item><item><title>Create Native Conda Environment for Apple Silicon</title><link>https://aiwangfeng.github.io/post/Create%20Native%20Conda%20Environment%20for%20Apple%20Silicon.html</link><description>### Command

```
CONDA_SUBDIR=osx-arm64 conda create -n native -c conda-forge python=3.11
```

### Make it permanent

```
conda activate native
conda config --env --set subdir osx-arm64
```

### Install some packeges

```
conda install -c apple tensorflow-deps
pip install tensorflow-macos tensorflow-metal
```。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Create%20Native%20Conda%20Environment%20for%20Apple%20Silicon.html</guid><pubDate>Tue, 25 Feb 2025 08:30:14 +0000</pubDate></item><item><title>Bookmarks</title><link>https://aiwangfeng.github.io/post/Bookmarks.html</link><description>[c82](https://www.c82.net/)
[Understanding Reasoning LLMs](https://magazine.sebastianraschka.com/p/understanding-reasoning-llms)。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Bookmarks.html</guid><pubDate>Sat, 08 Feb 2025 02:20:54 +0000</pubDate></item><item><title>Pandas DataFrame and Numpy</title><link>https://aiwangfeng.github.io/post/Pandas%20DataFrame%20and%20Numpy.html</link><description># [numpy.ndarray.flatten](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.flatten.html)

## ndarray.flatten(order='C')
     Return a copy of the array collapsed into one dimension.

```
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1,2], [3,4]])
&gt;&gt;&gt; a.flatten()
array([1, 2, 3, 4])
&gt;&gt;&gt; a.flatten('F')
array([1, 3, 2, 4])
```
# [numpy.ravel](https://numpy.org/doc/stable/reference/generated/numpy.ravel.html)

## numpy.ravel(a, order='C')
     Return a contiguous flattened array.

```
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([[1, 2, 3], [4, 5, 6]])
&gt;&gt;&gt; np.ravel(x)
array([1, 2, 3, 4, 5, 6])

&gt;&gt;&gt; x.reshape(-1)
array([1, 2, 3, 4, 5, 6])

&gt;&gt;&gt; np.ravel(x, order='F')
array([1, 4, 2, 5, 3, 6])
```

# [numpy.stack](https://numpy.org/doc/stable/reference/generated/numpy.stack.html)

## numpy.stack(arrays, axis=0, out=None, *, dtype=None, casting='same_kind')
    Join a sequence of arrays along a new axis.

```
&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; b = np.array([4, 5, 6])
&gt;&gt;&gt; np.stack((a, b))
array([[1, 2, 3],
       [4, 5, 6]])
```

# [numpy.split](https://numpy.org/doc/stable/reference/generated/numpy.split.html)

## numpy.split(ary, indices_or_sections, axis=0)
     Split an array into multiple sub-arrays as views into ary.

```
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.arange(9.0)
&gt;&gt;&gt; np.split(x, 3)
[array([0.,  1.,  2.]), array([3.,  4.,  5.]), array([6.,  7.,  8.])]
```

```
&gt;&gt;&gt; x = np.arange(8.0)
&gt;&gt;&gt; np.split(x, [3, 5, 6, 10])
[array([0.,  1.,  2.]),
 array([3.,  4.]),
 array([5.]),
 array([6.,  7.]),
 array([], dtype=float64)]
```。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Pandas%20DataFrame%20and%20Numpy.html</guid><pubDate>Wed, 22 Jan 2025 06:36:10 +0000</pubDate></item><item><title>Why Europeans don't get Elon?</title><link>https://aiwangfeng.github.io/post/Why%20Europeans%20don%27t%20get%20Elon-.html</link><description>[Why Europeans don't get Elon?](https://media.play.ht/full_-O4Bss4q19NbV2JzVzlp.mp3)。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Why%20Europeans%20don%27t%20get%20Elon-.html</guid><pubDate>Thu, 15 Aug 2024 02:50:17 +0000</pubDate></item><item><title>Interesting Youtube Videos</title><link>https://aiwangfeng.github.io/post/Interesting%20Youtube%20Videos.html</link><description>- https://www.youtube.com/watch?v=MO-AExWdl4Q。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Interesting%20Youtube%20Videos.html</guid><pubDate>Sat, 03 Aug 2024 14:54:54 +0000</pubDate></item><item><title>automount NFS shares in macOS</title><link>https://aiwangfeng.github.io/post/automount%20NFS%20shares%20in%20macOS.html</link><description># The Read-only Root Filesystem&#13;
&#13;
```&#13;
synthetic.conf – synthetic symbolic link and directory manifest&#13;
```&#13;
This file allows creating symbol links/empty directoreis under / which is mounted as read-only.&#13;
&#13;
# /etc/auto_master&#13;
&#13;
```&#13;
#&#13;
# Automounter master map&#13;
#&#13;
+auto_master  # Use directory service&#13;
#/net   -hosts  -nobrowse,hidefromfinder,nosuid&#13;
/home   auto_home -nobrowse,hidefromfinder&#13;
/Network/Servers -fstab&#13;
/-   -static&#13;
/-   auto_nfs -soft,nobrowse,nosuid&#13;
```&#13;
&#13;
# /etc/auto_nfs&#13;
&#13;
```&#13;
/System/Volumes/Data/DVD -fstype=nfs,soft,resvport,rw,noowners 192.168.1.10:/DVD&#13;
/System/Volumes/Data/Bluray -fstype=nfs,soft,resvport,rw,noowners 192.168.1.10:/Bluray&#13;
```&#13;
&#13;
# /etc/synthetic.conf&#13;
&#13;
```&#13;
DVD^ISystem/Volumes/Data/DVD&#13;
Bluray^ISystem/Volumes/Data/Bluray&#13;
```&#13;
&#13;
# /etc/nfs.conf for the NFS server&#13;
&#13;
```&#13;
nfs.client.mount.options = vers=4&#13;
```。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/automount%20NFS%20shares%20in%20macOS.html</guid><pubDate>Mon, 01 Apr 2024 03:30:56 +0000</pubDate></item><item><title>They'll fake it till they break it.</title><link>https://aiwangfeng.github.io/post/They%27ll%20fake%20it%20till%20they%20break%20it..html</link><description>![image](https://github.com/aiwangfeng/aiwangfeng.github.io/assets/4962499/807afa1c-b9b5-4b6a-b121-00dee8362556)。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/They%27ll%20fake%20it%20till%20they%20break%20it..html</guid><pubDate>Sat, 30 Mar 2024 07:50:38 +0000</pubDate></item><item><title>Wikipedia Pages</title><link>https://aiwangfeng.github.io/post/Wikipedia%20Pages.html</link><description>- [Scoring Rule](https://en.wikipedia.org/wiki/Scoring_rule)。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Wikipedia%20Pages.html</guid><pubDate>Mon, 25 Mar 2024 08:35:21 +0000</pubDate></item><item><title>Are we living in a toilet world?</title><link>https://aiwangfeng.github.io/post/Are%20we%20living%20in%20a%20toilet%20world-.html</link><description>![image](https://github.com/aiwangfeng/aiwangfeng.github.io/assets/4962499/850e1ecf-bbf9-4c22-a772-6180daae629a)&#13;
。</description><guid isPermaLink="true">https://aiwangfeng.github.io/post/Are%20we%20living%20in%20a%20toilet%20world-.html</guid><pubDate>Sun, 24 Mar 2024 14:30:57 +0000</pubDate></item></channel></rss>